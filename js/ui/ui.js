// Generated by CoffeeScript 1.6.3
var UI,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

UI = (function(_super) {
  __extends(UI, _super);

  function UI(socket) {
    var interval,
      _this = this;
    this.socket = socket;
    this.game_area = $("#game_area");
    this.registered_commands = {};
    this.registered_events = {};
    this.registered_variables = {};
    this.pending_events = {};
    UI.__super__.constructor.call(this, "ui");
    this.name_input_view = new NameInput(this, this);
    this.game_lobby_view = null;
    this.game_view = null;
    interval = setInterval(function() {
      var state;
      if (!_this.socket) {
        return;
      }
      state = _this.socket.get_connection();
      if (state === 3) {
        console.log("Connecting...");
        return _this.socket.createConnection();
      } else if (state === 1) {
        clearInterval(interval);
        _this.init_instances();
        return _this.set_state(0);
      }
    }, 1000);
    return;
  }

  UI.prototype.init_instances = function() {
    this.game_area.html("");
    this.game_lobby_view = new GameLobby(this, this);
    this.game_view = new Game(this, this);
    this.databus_subscribe_to_event("name_input_done", this);
    this.databus_subscribe_to_event("game_lobby_done", this);
    this.databus_subscribe_to_event("game_view_done", this);
  };

  UI.prototype.set_socket = function(socket) {
    this.socket = socket;
  };

  UI.prototype.set_state = function(state) {
    if (state === 0) {
      this.name_input_view.render(this.game_area, true);
    } else if (state === 1) {
      this.game_lobby_view.render(this.game_area);
    } else if (state === 2) {
      this.game_view.render(this.game_area);
    }
  };

  UI.prototype.event_notify = function(event_name) {
    if (event_name === "name_input_done") {
      this.set_state(1);
    } else if (event_name === "game_lobby_done") {
      this.set_state(2);
    } else if (event_name === "game_view_done") {
      this.init_instances();
      this.set_state(1);
    }
  };

  UI.prototype.databus_register_command = function(command, source) {
    this.registered_commands[command] = source;
  };

  UI.prototype.receive_command = function(command, source) {
    var cmd, key, value;
    for (cmd in command) {
      value = command[cmd];
      key = this.registered_commands[cmd];
      if (key) {
        key.receive_command(cmd, value);
      }
    }
  };

  UI.prototype.send_command = function(command) {
    this.socket.sendCommand(command);
  };

  UI.prototype.databus_register_variable = function(var_name, source) {
    this.registered_variables[var_name] = source;
  };

  UI.prototype.databus_request_variable = function(var_name) {
    if (!this.registered_variables.hasOwnProperty(var_name)) {
      return false;
    }
    return this.registered_variables[var_name].request_variable(var_name);
  };

  UI.prototype.databus_register_event = function(event_name, source) {
    var i;
    this.registered_events[event_name] = source;
    if (this.pending_events.hasOwnProperty(event_name)) {
      for (i in this.pending_events[event_name]) {
        this.databus_subscribe_to_event(event_name, this.pending_events[event_name][i]);
      }
      delete this.pending_events[event_name];
    }
  };

  UI.prototype.databus_subscribe_to_event = function(event_name, target) {
    var targets;
    if (!this.registered_events.hasOwnProperty(event_name)) {
      if (this.pending_events.hasOwnProperty(event_name)) {
        targets = this.pending_events[event_name];
        targets[targets.length] = target;
        this.pending_events[event_name] = targets;
      } else {
        this.pending_events[event_name] = [target];
      }
      return false;
    }
    this.registered_events[event_name].subscribe_to_event(event_name, target);
  };

  return UI;

})(View);
