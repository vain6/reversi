// Generated by CoffeeScript 1.6.3
window.View = (function() {
  function View(element) {
    this.main_element = $("<div id='" + element + "'>");
    this.register_commands_to_databus();
    this.register_variables_to_databus();
    this.register_events_to_databus();
    return;
  }

  View.prototype.render = function(target_element, append) {
    if (append == null) {
      append = false;
    }
    if (append === true) {
      target_element.append(this.main_element);
    } else {
      target_element.html(this.main_element);
    }
    this.init();
  };

  View.prototype.init = function() {};

  View.prototype.register_commands_to_databus = function() {
    var command, _i, _len, _ref;
    if (!this.register_commands) {
      return;
    }
    _ref = this.register_commands;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      command = _ref[_i];
      this.data_bus.databus_register_command(command, this);
    }
  };

  View.prototype.receive_command = function(command, value) {};

  View.prototype.send_command = function(command) {
    return this.data_bus.send_command(command);
  };

  View.prototype.register_variables_to_databus = function() {
    var v;
    if (!this.register_variables) {
      return;
    }
    for (v in this.register_variables) {
      this.data_bus.databus_register_variable(v, this);
    }
  };

  View.prototype.request_variable = function(variable) {
    if (!this.register_variables.hasOwnProperty(variable)) {
      return false;
    }
    return this.register_variables[variable]();
  };

  View.prototype.register_events_to_databus = function() {
    var e, _results;
    if (!this.register_events) {
      return;
    }
    _results = [];
    for (e in this.register_events) {
      _results.push(this.data_bus.databus_register_event(e, this));
    }
    return _results;
  };

  View.prototype.subscribe_to_event = function(event_name, target) {
    var key;
    key = this.register_events[event_name];
    key[key.length] = target;
  };

  View.prototype.raise_event = function(event_name, data) {
    var s, _i, _len, _ref, _results;
    if (data == null) {
      data = null;
    }
    _ref = this.register_events[event_name];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      _results.push(s.event_notify(event_name, data));
    }
    return _results;
  };

  View.prototype.event_notify = function(event_name) {};

  return View;

})();
