// Generated by CoffeeScript 1.6.3
var GameStatus,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameStatus = (function(_super) {
  __extends(GameStatus, _super);

  function GameStatus(parent, data_bus) {
    var _this = this;
    this.parent = parent;
    this.data_bus = data_bus;
    this.game_turn = null;
    this.game_players = null;
    this.turn_timer = null;
    this.last_turn = {
      "turn": null,
      "timer": null
    };
    this.register_commands = ["end_game"];
    this.register_variables = {
      "game_turn": function() {
        return _this.game_turn;
      }
    };
    this.register_events = {
      "end_game_display": [],
      "end_game": []
    };
    this.messages = {
      1: "Your opponent just resigned",
      2: "No moves left",
      3: "Opponent's timer ran out",
      4: "Your timer ran out",
      5: "No moves left",
      6: "No moves left",
      7: "Opponent connection lost"
    };
    GameStatus.__super__.constructor.call(this, "game_status");
    this.status_black_name = $("<span id='game_status_black_name'>");
    this.status_black_score = $("<span id='game_status_black_score'>0</span>");
    this.status_black = $("<div id='game_status_black' class='border impact'>").append(this.status_black_name).append(this.status_black_score);
    this.status_white_name = $("<span id='game_status_white_name'>");
    this.status_white_score = $("<span id='game_status_white_score'>0</span>");
    this.status_white = $("<div id='game_status_white' class='border impact'>").append(this.status_white_name).append(this.status_white_score);
    this.status_message_text = $("<div id='game_status_text' class='impact'>");
    this.status_message_timer = $("<div id='game_status_timer' class='lobster'>");
    this.status_message = $("<div id='game_status_message' class='border'>").append(this.status_message_text).append(this.status_message_timer);
    this.end_game_button = $("<input class='button' type='button' value='Resign'>").click(function() {
      return _this.resign();
    });
    this.status_button = $("<div id='game_status_button'>").append(this.end_game_button);
    this.main_element.append(this.status_black).append(this.status_white).append(this.status_message).append(this.status_button);
    this.data_bus.databus_subscribe_to_event("player_move", this);
    this.data_bus.databus_subscribe_to_event("player_move_confirm", this);
    return;
  }

  GameStatus.prototype.init = function() {
    this.game_players = this.data_bus.databus_request_variable("game_players");
    if (this.game_players.local.color === "black") {
      this.status_black_name.html(this.game_players.local.name);
      this.status_white_name.html(this.game_players.opponent.name);
      this.game_turn = "local";
    } else {
      this.status_black_name.html(this.game_players.opponent.name);
      this.status_white_name.html(this.game_players.local.name);
      this.game_turn = "opponent";
    }
    this.start_turn();
  };

  GameStatus.prototype.event_notify = function(event_name, data) {
    if (this.game_players.local.color === data["turn"]) {
      this.game_turn = "local";
    } else {
      this.game_turn = "opponent";
    }
    if (event_name === "player_move") {
      this.render_score();
      if (this.game_turn === "local") {
        this.start_turn();
      }
    } else if (event_name === "player_move_confirm") {
      this.start_turn();
    }
  };

  GameStatus.prototype.receive_command = function(command, value) {
    var r, winner;
    if (command === "end_game") {
      r = value.reason;
      if (r === 1 || r === 2 || r === 3 || r === 7) {
        winner = this.game_players.local.color;
      } else if (r === 4 || r === 5) {
        winner = this.game_players.opponent.color;
      } else if (r === 6) {
        winner = false;
      }
      this.end_game_display(value.reason, winner);
    }
  };

  GameStatus.prototype.render_score = function() {
    var game_score;
    game_score = this.data_bus.databus_request_variable("game_score");
    this.status_white_score.html(game_score.white);
    this.status_black_score.html(game_score.black);
  };

  GameStatus.prototype.start_turn = function() {
    var turn_text;
    this.status_black.removeClass("game_status_highlight");
    this.status_white.removeClass("game_status_highlight");
    this.status_message_text.html("");
    this.status_message_timer.html("");
    clearInterval(this.turn_timer);
    if (this.game_turn === "local") {
      turn_text = "Your turn";
      if (this.game_players.local.color === "black") {
        this.status_black.addClass("game_status_highlight");
      } else {
        this.status_white.addClass("game_status_highlight");
      }
    } else {
      turn_text = "Opponent's turn";
      if (this.game_players.opponent.color === "black") {
        this.status_black.addClass("game_status_highlight");
      } else {
        this.status_white.addClass("game_status_highlight");
      }
    }
    this.render_score();
    this.status_message_text.html(turn_text);
    this.status_message_timer.html("Time left: 60");
    this.start_timer();
  };

  GameStatus.prototype.start_timer = function() {
    var timer,
      _this = this;
    timer = 60;
    clearInterval(this.turn_timer);
    this.turn_timer = setInterval(function() {
      timer--;
      _this.status_message_timer.html("Time left: " + timer);
      if (timer === 0) {
        return clearInterval(_this.turn_timer);
      }
    }, 1000);
  };

  GameStatus.prototype.resign = function() {
    this.send_command({
      "end_game": {
        "reason": 1
      }
    });
    this.raise_event("end_game");
  };

  GameStatus.prototype.end_game_display = function(reason, winner) {
    var _this = this;
    this.raise_event("end_game_display");
    this.render_score();
    this.status_black.removeClass("game_status_highlight");
    this.status_white.removeClass("game_status_highlight");
    this.status_message_text.html(this.messages[reason]);
    clearInterval(this.turn_timer);
    if (winner === 0) {
      this.status_message_timer.html("The game is a tie!");
    } else if (this.game_players.local.color === winner) {
      this.status_message_timer.html("You are victorious!");
    } else {
      this.status_message_timer.html("You lose miserably.");
    }
    this.end_game_button.val("OK, got it");
    this.end_game_button.unbind("click");
    this.end_game_button.click(function() {
      return _this.end_game_confirm();
    });
  };

  GameStatus.prototype.end_game_confirm = function() {
    this.send_command({
      "return_lobby": {
        "": ""
      }
    });
    this.raise_event("end_game");
  };

  return GameStatus;

})(View);
