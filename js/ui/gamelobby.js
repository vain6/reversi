// Generated by CoffeeScript 1.6.3
var GameLobby,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameLobby = (function(_super) {
  __extends(GameLobby, _super);

  function GameLobby(parent, data_bus) {
    var lobby_box,
      _this = this;
    this.parent = parent;
    this.data_bus = data_bus;
    this.game_players = {
      "local": {
        "name": null,
        "color": null
      },
      "opponent": {
        "name": null,
        "color": null
      }
    };
    this.opponent_name = null;
    this.local_name = null;
    this.local_joined = false;
    this.local_created = false;
    this.countdown_interval = 1000;
    this.register_commands = ["lobby_players"];
    this.register_variables = {
      "game_players": function() {
        return _this.game_players;
      }
    };
    this.register_events = {
      "game_lobby_done": []
    };
    this.messages = {
      "null": null
    };
    GameLobby.__super__.constructor.call(this, "game_lobby");
    lobby_box = $("\        <div id='game_lobby_counter' class='lobster'>Finding a game...</div><br />        <div id='game_lobby_box' class='border'>            <div id='game_lobby_player_left'>                <div id='game_lobby_player_left_text' class='impact'></div>            </div>            <div id='game_lobby_player_vs'>                <div id='game_lobby_player_vs_text' class='lobster'></div>            </div>            <div id='game_lobby_player_right'>                <div id='game_lobby_player_right_text' class='impact'></div>            </div>        </div>");
    this.main_element.append(lobby_box);
    return;
  }

  GameLobby.prototype.receive_command = function(command, value) {
    var opponent;
    if (command === "lobby_players") {
      opponent = value["opponent"];
      if (opponent.length === 0) {
        this.opponent_name = "???";
        this.local_created = true;
      } else {
        opponent = value["opponent"];
        this.game_players.opponent.name = opponent;
        this.opponent_name = opponent;
        if (!this.local_created) {
          this.local_joined = true;
        }
      }
      this.render_players();
      if (opponent.length !== 0) {
        this.render_countdown();
      }
    }
  };

  GameLobby.prototype.render_players = function() {
    var local_name;
    $("#game_lobby_counter").html("Waiting for another player...");
    $("#game_lobby_player_vs_text").html("VS");
    local_name = this.data_bus.databus_request_variable("local_name");
    this.game_players.local.name = local_name;
    this.local_name = local_name;
    if (this.local_joined) {
      this.game_players.local.color = "white";
      this.game_players.opponent.color = "black";
      $("#game_lobby_player_left_text").html(this.opponent_name);
      $("#game_lobby_player_right_text").html(this.local_name);
    } else {
      this.game_players.local.color = "black";
      this.game_players.opponent.color = "white";
      $("#game_lobby_player_left_text").html(this.local_name);
      $("#game_lobby_player_right_text").html(this.opponent_name);
    }
  };

  GameLobby.prototype.render_countdown = function() {
    var counter, interval,
      _this = this;
    counter = 3;
    $("#game_lobby_counter").html("Game starts in ");
    interval = setInterval(function() {
      if (counter < 1) {
        if (counter === 0) {
          clearInterval(interval);
          _this.raise_event("game_lobby_done");
        }
        return;
      }
      $("#game_lobby_counter").append("" + counter + "...");
      return counter--;
    }, this.countdown_interval);
  };

  return GameLobby;

})(View);
